
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/01.Phantoms/example_brainweb.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_01.Phantoms_example_brainweb.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_01.Phantoms_example_brainweb.py:


================
Brainweb Phantom
================

Example of Brainweb phantom creation.

This examples show how to generate numerical phantoms based on the Brainweb
dataset.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from mrtwin import brainweb_phantom








.. GENERATED FROM PYTHON SOURCE LINES 19-26

Basic Usage
===========
The Brainweb database consists of a set of 20 normal brains
(ids equal to ``[4, 5, 6, 18, 20, 38, 41-54]``) at a nominal 0.5 mm isotropic
resolution and a shape of ``(nz, ny, nx) = (362, 434, 362)``.

A digital Brainweb phantom can be created as:

.. GENERATED FROM PYTHON SOURCE LINES 26-30

.. code-block:: Python


    phantom2D = brainweb_phantom(ndim=2, subject=4, segtype="fuzzy")  # 2D phantom
    phantom3D = brainweb_phantom(ndim=3, subject=4, segtype="fuzzy")  # 3D phantom





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    Downloading subject04_gry: 0.00B [00:00, ?B/s]

    Downloading subject04_csf: 0.00B [00:00, ?B/s]

    Downloading subject04_wht: 0.00B [00:00, ?B/s]

    Downloading subject04_bck: 0.00B [00:00, ?B/s]

    Downloading subject04_bck: 1.00kB [00:00, 1.87kB/s]

    Downloading subject04_bck: 33.0kB [00:00, 63.3kB/s]

    Downloading subject04_gry: 1.00kB [00:00, 1.24kB/s]

    Downloading subject04_csf: 1.00kB [00:00, 1.27kB/s]

    Downloading subject04_bck: 128kB [00:00, 249kB/s]  

    Downloading subject04_wht: 1.00kB [00:00, 1.25kB/s]

    Downloading subject04_bck: 185kB [00:00, 322kB/s]

    Downloading subject04_gry: 33.0kB [00:00, 46.9kB/s]

    Downloading subject04_csf: 33.0kB [00:00, 47.6kB/s]

    Downloading subject04_wht: 33.0kB [00:00, 47.1kB/s]

    Downloading subject04_gry: 128kB [00:01, 198kB/s]  

    Downloading subject04_bck: 288kB [00:01, 452kB/s]

    Downloading subject04_csf: 145kB [00:01, 219kB/s]  

    Downloading subject04_wht: 145kB [00:01, 217kB/s]  

    Downloading subject04_bck: 409kB [00:01, 620kB/s]

    Downloading subject04_wht: 257kB [00:01, 377kB/s]

    Downloading subject04_gry: 241kB [00:01, 337kB/s]

    Downloading subject04_csf: 265kB [00:01, 378kB/s]

    Downloading subject04_bck: 483kB [00:01, 647kB/s]

    Downloading subject04_gry: 352kB [00:01, 482kB/s]

    Downloading subject04_csf: 400kB [00:01, 536kB/s]

    Downloading subject04_wht: 392kB [00:01, 518kB/s]

    Downloading subject04_bck: 617kB [00:01, 748kB/s]

    Downloading subject04_gry: 481kB [00:01, 611kB/s]

    Downloading subject04_csf: 544kB [00:01, 676kB/s]

    Downloading subject04_wht: 536kB [00:01, 662kB/s]

    Downloading subject04_bck: 769kB [00:01, 855kB/s]

    Downloading subject04_gry: 625kB [00:01, 740kB/s]

    Downloading subject04_wht: 688kB [00:01, 825kB/s]

    Downloading subject04_csf: 704kB [00:01, 814kB/s]

    Downloading subject04_bck: 881kB [00:01, 921kB/s]

    Downloading subject04_gry: 784kB [00:01, 821kB/s]

    Downloading subject04_csf: 881kB [00:01, 954kB/s]

    Downloading subject04_wht: 865kB [00:01, 922kB/s]

    Downloading subject04_bck: 976kB [00:01, 892kB/s]

    Downloading subject04_gry: 961kB [00:01, 958kB/s]

    Downloading subject04_bck: 1.04MB [00:01, 847kB/s]

    Downloading subject04_csf: 1.05MB [00:01, 1.09MB/s]

    Downloading subject04_wht: 1.03MB [00:01, 1.06MB/s]

    Downloading subject04_gry: 1.13MB [00:02, 1.09MB/s]

    Downloading subject04_csf: 1.25MB [00:02, 1.22MB/s]

    Downloading subject04_wht: 1.24MB [00:02, 1.21MB/s]

    Downloading subject04_bck: 1.12MB [00:02, 695kB/s]

    Downloading subject04_gry: 1.33MB [00:02, 1.27MB/s]

    Downloading subject04_csf: 1.49MB [00:02, 1.38MB/s]

    Downloading subject04_wht: 1.47MB [00:02, 1.36MB/s]

    Downloading subject04_gry: 1.56MB [00:02, 1.37MB/s]

    Downloading subject04_wht: 1.72MB [00:02, 1.60MB/s]

    Downloading subject04_csf: 1.74MB [00:02, 1.53MB/s]

    Downloading subject04_gry: 1.81MB [00:02, 1.60MB/s]

    Downloading subject04_csf: 2.01MB [00:02, 1.77MB/s]

    Downloading subject04_wht: 2.00MB [00:02, 1.68MB/s]

    Downloading subject04_gry: 2.03MB [00:02, 1.79MB/s]

                                                      

    Downloading subject04_csf: 2.32MB [00:02, 1.87MB/s]

    Downloading subject04_wht: 2.31MB [00:02, 1.86MB/s]

    Downloading subject04_gry: 2.24MB [00:02, 1.72MB/s]

    Downloading subject04_csf: 2.66MB [00:02, 2.07MB/s]

    Downloading subject04_wht: 2.64MB [00:02, 2.07MB/s]

    Downloading subject04_gry: 2.47MB [00:02, 1.87MB/s]

    Downloading subject04_wht: 3.01MB [00:02, 2.40MB/s]

    Downloading subject04_gry: 2.71MB [00:02, 2.03MB/s]

    Downloading subject04_csf: 3.03MB [00:02, 2.29MB/s]

    Downloading subject04_wht: 3.36MB [00:02, 2.68MB/s]

    Downloading subject04_gry: 2.91MB [00:03, 2.01MB/s]

    Downloading subject04_csf: 3.39MB [00:02, 2.63MB/s]

    Downloading subject04_wht: 3.63MB [00:03, 2.72MB/s]

    Downloading subject04_csf: 3.65MB [00:03, 2.50MB/s]

    Downloading subject04_gry: 3.11MB [00:03, 1.82MB/s]

    Downloading subject04_wht: 3.99MB [00:03, 2.92MB/s]

    Downloading subject04_fat: 0.00B [00:00, ?B/s]

    Downloading subject04_csf: 3.90MB [00:03, 2.19MB/s]

    Downloading subject04_gry: 3.29MB [00:03, 1.62MB/s]

    Downloading subject04_wht: 4.27MB [00:03, 2.81MB/s]

    Downloading subject04_gry: 3.45MB [00:03, 1.54MB/s]

    Downloading subject04_wht: 4.54MB [00:03, 2.69MB/s]

    Downloading subject04_csf: 4.12MB [00:03, 1.90MB/s]

    Downloading subject04_gry: 3.60MB [00:03, 1.50MB/s]

    Downloading subject04_wht: 4.81MB [00:03, 2.46MB/s]

    Downloading subject04_csf: 4.31MB [00:03, 1.69MB/s]

    Downloading subject04_gry: 3.75MB [00:03, 1.45MB/s]

    Downloading subject04_wht: 5.04MB [00:03, 2.21MB/s]

    Downloading subject04_csf: 4.50MB [00:03, 1.74MB/s]

    Downloading subject04_gry: 3.89MB [00:03, 1.44MB/s]

    Downloading subject04_wht: 5.26MB [00:03, 2.15MB/s]

    Downloading subject04_csf: 4.67MB [00:03, 1.69MB/s]

    Downloading subject04_gry: 4.06MB [00:03, 1.49MB/s]

    Downloading subject04_csf: 4.84MB [00:03, 1.67MB/s]

    Downloading subject04_wht: 5.47MB [00:03, 2.06MB/s]

    Downloading subject04_gry: 4.22MB [00:03, 1.52MB/s]

    Downloading subject04_fat: 1.00kB [00:00, 1.36kB/s]

    Downloading subject04_wht: 5.67MB [00:04, 2.05MB/s]

    Downloading subject04_csf: 5.00MB [00:04, 1.60MB/s]

    Downloading subject04_gry: 4.37MB [00:04, 1.45MB/s]

    Downloading subject04_wht: 5.87MB [00:04, 2.00MB/s]

    Downloading subject04_csf: 5.16MB [00:04, 1.58MB/s]

    Downloading subject04_fat: 33.0kB [00:00, 49.9kB/s]

    Downloading subject04_gry: 4.51MB [00:04, 1.37MB/s]

    Downloading subject04_wht: 6.06MB [00:04, 1.98MB/s]

    Downloading subject04_csf: 5.31MB [00:04, 1.56MB/s]

    Downloading subject04_gry: 4.65MB [00:04, 1.41MB/s]

    Downloading subject04_fat: 145kB [00:01, 224kB/s]  

    Downloading subject04_wht: 6.25MB [00:04, 1.94MB/s]

    Downloading subject04_csf: 5.47MB [00:04, 1.58MB/s]

    Downloading subject04_gry: 4.88MB [00:04, 1.59MB/s]

    Downloading subject04_fat: 265kB [00:01, 382kB/s]

    Downloading subject04_csf: 5.69MB [00:04, 1.76MB/s]

    Downloading subject04_wht: 6.44MB [00:04, 1.82MB/s]

    Downloading subject04_gry: 5.03MB [00:04, 1.49MB/s]

    Downloading subject04_wht: 6.61MB [00:04, 1.82MB/s]

    Downloading subject04_csf: 5.86MB [00:04, 1.65MB/s]

    Downloading subject04_fat: 400kB [00:01, 534kB/s]

    Downloading subject04_gry: 5.17MB [00:04, 1.49MB/s]

    Downloading subject04_wht: 6.80MB [00:04, 1.81MB/s]

    Downloading subject04_csf: 6.02MB [00:04, 1.51MB/s]

    Downloading subject04_fat: 545kB [00:01, 662kB/s]

    Downloading subject04_gry: 5.31MB [00:04, 1.42MB/s]

    Downloading subject04_wht: 6.99MB [00:04, 1.80MB/s]

    Downloading subject04_csf: 6.16MB [00:04, 1.48MB/s]

    Downloading subject04_gry: 5.45MB [00:04, 1.42MB/s]

    Downloading subject04_fat: 704kB [00:01, 801kB/s]

    Downloading subject04_wht: 7.16MB [00:04, 1.80MB/s]

    Downloading subject04_csf: 6.31MB [00:04, 1.45MB/s]

    Downloading subject04_gry: 5.59MB [00:04, 1.40MB/s]

    Downloading subject04_wht: 7.33MB [00:05, 1.78MB/s]

    Downloading subject04_fat: 865kB [00:01, 885kB/s]

    Downloading subject04_csf: 6.45MB [00:05, 1.41MB/s]

    Downloading subject04_gry: 5.74MB [00:05, 1.37MB/s]

    Downloading subject04_wht: 7.50MB [00:05, 1.75MB/s]

    Downloading subject04_csf: 6.58MB [00:05, 1.38MB/s]

    Downloading subject04_gry: 5.88MB [00:05, 1.38MB/s]

    Downloading subject04_fat: 961kB [00:01, 821kB/s]

    Downloading subject04_wht: 7.67MB [00:05, 1.73MB/s]

    Downloading subject04_csf: 6.72MB [00:05, 1.36MB/s]

    Downloading subject04_gry: 6.02MB [00:05, 1.38MB/s]

    Downloading subject04_fat: 1.02MB [00:02, 768kB/s]

    Downloading subject04_wht: 7.86MB [00:05, 1.75MB/s]

    Downloading subject04_gry: 6.15MB [00:05, 1.38MB/s]

    Downloading subject04_csf: 6.86MB [00:05, 1.35MB/s]

    Downloading subject04_wht: 8.03MB [00:05, 1.74MB/s]

    Downloading subject04_fat: 1.10MB [00:02, 696kB/s]

    Downloading subject04_csf: 6.99MB [00:05, 1.29MB/s]

    Downloading subject04_gry: 6.28MB [00:05, 1.21MB/s]

    Downloading subject04_wht: 8.20MB [00:05, 1.59MB/s]

    Downloading subject04_csf: 7.11MB [00:05, 1.24MB/s]

    Downloading subject04_fat: 1.17MB [00:02, 596kB/s]

    Downloading subject04_wht: 8.39MB [00:05, 1.68MB/s]

    Downloading subject04_gry: 6.40MB [00:05, 1.06MB/s]

    Downloading subject04_csf: 7.27MB [00:05, 1.32MB/s]

    Downloading subject04_wht: 8.56MB [00:05, 1.69MB/s]

    Downloading subject04_gry: 6.51MB [00:05, 1.06MB/s]

    Downloading subject04_fat: 1.25MB [00:02, 584kB/s]

    Downloading subject04_csf: 7.42MB [00:05, 1.36MB/s]

    Downloading subject04_wht: 8.75MB [00:05, 1.74MB/s]

    Downloading subject04_gry: 6.63MB [00:05, 1.07MB/s]

    Downloading subject04_csf: 7.58MB [00:05, 1.43MB/s]

    Downloading subject04_fat: 1.34MB [00:02, 621kB/s]

    Downloading subject04_wht: 8.94MB [00:05, 1.78MB/s]

    Downloading subject04_gry: 6.74MB [00:06, 1.07MB/s]

    Downloading subject04_csf: 7.74MB [00:06, 1.48MB/s]

    Downloading subject04_wht: 9.11MB [00:06, 1.78MB/s]

    Downloading subject04_fat: 1.42MB [00:02, 593kB/s]

    Downloading subject04_gry: 6.84MB [00:06, 1.08MB/s]

    Downloading subject04_csf: 7.89MB [00:06, 1.51MB/s]

    Downloading subject04_wht: 9.30MB [00:06, 1.81MB/s]

    Downloading subject04_fat: 1.49MB [00:02, 565kB/s]

    Downloading subject04_gry: 6.95MB [00:06, 1.02MB/s]

    Downloading subject04_csf: 8.04MB [00:06, 1.45MB/s]

    Downloading subject04_wht: 9.47MB [00:06, 1.73MB/s]

    Downloading subject04_gry: 7.09MB [00:06, 1.13MB/s]

    Downloading subject04_csf: 8.18MB [00:06, 1.40MB/s]

    Downloading subject04_wht: 9.66MB [00:06, 1.77MB/s]

    Downloading subject04_fat: 1.54MB [00:03, 473kB/s]

    Downloading subject04_gry: 7.22MB [00:06, 1.16MB/s]

    Downloading subject04_csf: 8.38MB [00:06, 1.59MB/s]

    Downloading subject04_wht: 9.84MB [00:06, 1.80MB/s]

    Downloading subject04_gry: 7.41MB [00:06, 1.36MB/s]

    Downloading subject04_csf: 8.59MB [00:06, 1.78MB/s]

    Downloading subject04_wht: 10.0MB [00:06, 1.89MB/s]

    Downloading subject04_gry: 7.66MB [00:06, 1.70MB/s]

    Downloading subject04_csf: 8.77MB [00:06, 1.75MB/s]

    Downloading subject04_wht: 10.3MB [00:06, 1.89MB/s]

                                                      

    Downloading subject04_gry: 7.82MB [00:06, 1.63MB/s]

    Downloading subject04_csf: 9.05MB [00:06, 2.07MB/s]

    Downloading subject04_wht: 10.5MB [00:06, 2.22MB/s]

    Downloading subject04_gry: 7.98MB [00:06, 1.55MB/s]

    Downloading subject04_wht: 10.8MB [00:06, 2.28MB/s]

    Downloading subject04_gry: 8.16MB [00:07, 1.61MB/s]

    Downloading subject04_gry: 8.31MB [00:07, 1.60MB/s]

    Downloading subject04_gry: 8.59MB [00:07, 1.97MB/s]

    Downloading subject04_gry: 8.88MB [00:07, 2.22MB/s]

    Downloading subject04_gry: 9.16MB [00:07, 2.41MB/s]

    Downloading subject04_mus: 0.00B [00:00, ?B/s]

    Downloading subject04_gry: 9.42MB [00:07, 2.51MB/s]

                                                       

    Downloading subject04_gry: 9.70MB [00:07, 2.63MB/s]

                                                       

    Downloading subject04_gry: 9.99MB [00:07, 2.69MB/s]

    Downloading subject04_gry: 10.3MB [00:07, 2.73MB/s]

    Downloading subject04_mus: 1.00kB [00:00, 2.70kB/s]

    Downloading subject04_gry: 10.5MB [00:07, 2.78MB/s]

    Downloading subject04_mus: 33.0kB [00:00, 82.0kB/s]

    Downloading subject04_gry: 10.8MB [00:08, 2.78MB/s]

    Downloading subject04_mus: 152kB [00:00, 340kB/s]  

    Downloading subject04_gry: 11.1MB [00:08, 2.73MB/s]

    Downloading subject04_gry: 11.3MB [00:08, 2.72MB/s]

    Downloading subject04_mus: 345kB [00:00, 718kB/s]

    Downloading subject04_skl: 0.00B [00:00, ?B/s]

    Downloading subject04_m-s: 0.00B [00:00, ?B/s]

    Downloading subject04_mus: 513kB [00:00, 974kB/s]

    Downloading subject04_gry: 11.6MB [00:08, 2.28MB/s]

    Downloading subject04_mus: 689kB [00:01, 1.08MB/s]

    Downloading subject04_gry: 11.8MB [00:08, 2.06MB/s]

    Downloading subject04_mus: 945kB [00:01, 1.33MB/s]

    Downloading subject04_gry: 12.0MB [00:08, 1.78MB/s]

    Downloading subject04_mus: 1.20MB [00:01, 1.54MB/s]

    Downloading subject04_gry: 12.2MB [00:08, 1.66MB/s]

    Downloading subject04_mus: 1.49MB [00:01, 1.85MB/s]

    Downloading subject04_gry: 12.4MB [00:09, 1.61MB/s]

    Downloading subject04_mus: 1.71MB [00:01, 1.96MB/s]

    Downloading subject04_skl: 1.00kB [00:00, 1.41kB/s]

    Downloading subject04_m-s: 1.00kB [00:00, 1.32kB/s]

    Downloading subject04_gry: 12.5MB [00:09, 1.54MB/s]

    Downloading subject04_skl: 33.0kB [00:00, 51.9kB/s]

    Downloading subject04_mus: 2.01MB [00:01, 2.04MB/s]

    Downloading subject04_m-s: 33.0kB [00:00, 48.9kB/s]

    Downloading subject04_gry: 12.7MB [00:09, 1.54MB/s]

    Downloading subject04_skl: 136kB [00:01, 219kB/s]  

    Downloading subject04_mus: 2.39MB [00:01, 2.29MB/s]

    Downloading subject04_gry: 12.9MB [00:09, 1.56MB/s]

    Downloading subject04_m-s: 145kB [00:01, 221kB/s]  

    Downloading subject04_skl: 241kB [00:01, 359kB/s]

    Downloading subject04_mus: 2.81MB [00:01, 2.53MB/s]

    Downloading subject04_gry: 13.1MB [00:09, 1.82MB/s]

    Downloading subject04_m-s: 264kB [00:01, 377kB/s]

    Downloading subject04_mus: 3.14MB [00:02, 2.72MB/s]

    Downloading subject04_gry: 13.3MB [00:09, 1.80MB/s]

    Downloading subject04_skl: 360kB [00:01, 500kB/s]

    Downloading subject04_m-s: 400kB [00:01, 534kB/s]

    Downloading subject04_mus: 3.41MB [00:02, 2.70MB/s]

    Downloading subject04_gry: 13.5MB [00:09, 1.65MB/s]

    Downloading subject04_skl: 489kB [00:01, 626kB/s]

    Downloading subject04_m-s: 545kB [00:01, 671kB/s]

    Downloading subject04_mus: 3.67MB [00:02, 2.46MB/s]

    Downloading subject04_gry: 13.6MB [00:09, 1.59MB/s]

    Downloading subject04_skl: 632kB [00:01, 752kB/s]

    Downloading subject04_mus: 3.91MB [00:02, 2.44MB/s]

    Downloading subject04_m-s: 705kB [00:01, 805kB/s]

    Downloading subject04_gry: 13.8MB [00:09, 1.51MB/s]

    Downloading subject04_skl: 793kB [00:01, 880kB/s]

    Downloading subject04_gry: 13.9MB [00:10, 1.50MB/s]

    Downloading subject04_mus: 4.14MB [00:02, 2.05MB/s]

    Downloading subject04_m-s: 881kB [00:01, 935kB/s]

    Downloading subject04_skl: 969kB [00:01, 1.01MB/s]

    Downloading subject04_gry: 14.1MB [00:10, 1.43MB/s]

    Downloading subject04_mus: 4.35MB [00:02, 1.99MB/s]

    Downloading subject04_m-s: 1.05MB [00:01, 1.06MB/s]

    Downloading subject04_skl: 1.13MB [00:01, 1.09MB/s]

    Downloading subject04_mus: 4.54MB [00:02, 1.95MB/s]

    Downloading subject04_m-s: 1.25MB [00:02, 1.19MB/s]

    Downloading subject04_skl: 1.27MB [00:02, 1.13MB/s]

    Downloading subject04_mus: 4.73MB [00:02, 1.85MB/s]

    Downloading subject04_m-s: 1.49MB [00:02, 1.35MB/s]

    Downloading subject04_skl: 1.41MB [00:02, 1.15MB/s]

    Downloading subject04_mus: 4.91MB [00:03, 1.61MB/s]

    Downloading subject04_m-s: 1.70MB [00:02, 1.56MB/s]

    Downloading subject04_skl: 1.53MB [00:02, 1.14MB/s]

    Downloading subject04_mus: 5.07MB [00:03, 1.59MB/s]

    Downloading subject04_m-s: 1.86MB [00:02, 1.53MB/s]

    Downloading subject04_skl: 1.75MB [00:02, 1.42MB/s]

    Downloading subject04_mus: 5.30MB [00:03, 1.76MB/s]

    Downloading subject04_m-s: 2.02MB [00:02, 1.47MB/s]

    Downloading subject04_skl: 1.89MB [00:02, 1.31MB/s]

    Downloading subject04_mus: 5.47MB [00:03, 1.76MB/s]

    Downloading subject04_m-s: 2.16MB [00:02, 1.44MB/s]

    Downloading subject04_skl: 2.02MB [00:02, 1.31MB/s]

                                                       

    Downloading subject04_mus: 5.74MB [00:03, 2.02MB/s]

    Downloading subject04_m-s: 2.31MB [00:02, 1.44MB/s]

    Downloading subject04_skl: 2.17MB [00:02, 1.38MB/s]

    Downloading subject04_mus: 5.93MB [00:03, 1.96MB/s]

    Downloading subject04_m-s: 2.45MB [00:02, 1.45MB/s]

    Downloading subject04_skl: 2.34MB [00:02, 1.47MB/s]

    Downloading subject04_mus: 6.12MB [00:03, 1.94MB/s]

    Downloading subject04_m-s: 2.59MB [00:02, 1.45MB/s]

    Downloading subject04_skl: 2.50MB [00:02, 1.49MB/s]

    Downloading subject04_m-s: 2.74MB [00:03, 1.43MB/s]

    Downloading subject04_m-s: 2.97MB [00:03, 1.69MB/s]

    Downloading subject04_ves: 0.00B [00:00, ?B/s]

    Downloading subject04_m-s: 3.19MB [00:03, 1.82MB/s]

    Downloading subject04_m-s: 3.48MB [00:03, 2.12MB/s]

                                                       

    Downloading subject04_m-s: 3.73MB [00:03, 2.22MB/s]

                                                       

    Downloading subject04_m-s: 4.06MB [00:03, 2.54MB/s]

    Downloading subject04_m-s: 4.34MB [00:03, 2.60MB/s]

    Downloading subject04_ves: 1.00kB [00:00, 2.03kB/s]

    Downloading subject04_m-s: 4.74MB [00:03, 2.97MB/s]

    Downloading subject04_ves: 33.0kB [00:00, 67.3kB/s]

    Downloading subject04_m-s: 5.06MB [00:03, 3.04MB/s]

    Downloading subject04_ves: 145kB [00:00, 280kB/s]  

    Downloading subject04_m-s: 5.41MB [00:04, 3.17MB/s]

    Downloading subject04_fat2: 0.00B [00:00, ?B/s]

    Downloading subject04_m-s: 5.71MB [00:04, 3.03MB/s]

    Downloading subject04_ves: 265kB [00:00, 448kB/s]

    Downloading subject04_dura: 0.00B [00:00, ?B/s]

    Downloading subject04_ves: 400kB [00:01, 600kB/s]

    Downloading subject04_m-s: 6.00MB [00:04, 2.53MB/s]

    Downloading subject04_ves: 545kB [00:01, 727kB/s]

    Downloading subject04_m-s: 6.26MB [00:04, 2.11MB/s]

    Downloading subject04_ves: 704kB [00:01, 847kB/s]

    Downloading subject04_m-s: 6.48MB [00:04, 2.11MB/s]

    Downloading subject04_fat2: 1.00kB [00:00, 1.59kB/s]

    Downloading subject04_ves: 881kB [00:01, 968kB/s]

    Downloading subject04_m-s: 6.69MB [00:04, 1.96MB/s]

    Downloading subject04_fat2: 33.0kB [00:00, 56.9kB/s]

    Downloading subject04_m-s: 6.89MB [00:04, 1.88MB/s]

    Downloading subject04_ves: 1.05MB [00:01, 1.09MB/s]

    Downloading subject04_fat2: 144kB [00:00, 249kB/s]  

    Downloading subject04_dura: 1.00kB [00:00, 1.40kB/s]

    Downloading subject04_ves: 1.25MB [00:01, 1.20MB/s]

    Downloading subject04_fat2: 264kB [00:01, 418kB/s]

    Downloading subject04_dura: 33.0kB [00:00, 50.9kB/s]

    Downloading subject04_ves: 1.49MB [00:01, 1.35MB/s]

    Downloading subject04_fat2: 400kB [00:01, 577kB/s]

    Downloading subject04_dura: 121kB [00:01, 187kB/s]  

    Downloading subject04_ves: 1.74MB [00:02, 1.48MB/s]

    Downloading subject04_fat2: 544kB [00:01, 713kB/s]

    Downloading subject04_dura: 216kB [00:01, 327kB/s]

                                                       

    Downloading subject04_ves: 2.02MB [00:02, 1.65MB/s]

    Downloading subject04_dura: 272kB [00:01, 378kB/s]

    Downloading subject04_fat2: 704kB [00:01, 847kB/s]

    Downloading subject04_ves: 2.30MB [00:02, 1.93MB/s]

    Downloading subject04_dura: 384kB [00:01, 534kB/s]

    Downloading subject04_fat2: 881kB [00:01, 981kB/s]

    Downloading subject04_ves: 2.49MB [00:02, 1.75MB/s]

    Downloading subject04_dura: 453kB [00:01, 574kB/s]

    Downloading subject04_fat2: 1.05MB [00:01, 1.11MB/s]

    Downloading subject04_dura: 529kB [00:01, 624kB/s]

    Downloading subject04_ves: 2.66MB [00:02, 1.59MB/s]

    Downloading subject04_fat2: 1.25MB [00:01, 1.24MB/s]

    Downloading subject04_dura: 600kB [00:01, 602kB/s]

    Downloading subject04_ves: 2.82MB [00:02, 1.55MB/s]

    Downloading subject04_fat2: 1.49MB [00:02, 1.39MB/s]

    Downloading subject04_dura: 705kB [00:01, 653kB/s]

    Downloading subject04_fat2: 1.70MB [00:02, 1.56MB/s]

    Downloading subject04_mrw: 0.00B [00:00, ?B/s]

    Downloading subject04_dura: 785kB [00:01, 668kB/s]

    Downloading subject04_dura: 881kB [00:02, 743kB/s]

    Downloading subject04_fat2: 1.86MB [00:02, 1.49MB/s]

    Downloading subject04_fat2: 2.03MB [00:02, 1.52MB/s]

                                                       

    Downloading subject04_dura: 957kB [00:02, 564kB/s]

    Downloading subject04_fat2: 2.18MB [00:02, 1.46MB/s]

    Downloading subject04_fat2: 2.34MB [00:02, 1.50MB/s]

    Downloading subject04_mrw: 1.00kB [00:00, 2.02kB/s]

    Downloading subject04_fat2: 2.56MB [00:02, 1.68MB/s]

    Downloading subject04_mrw: 33.0kB [00:00, 67.7kB/s]

    Downloading subject04_fat2: 2.75MB [00:02, 1.75MB/s]

                                                      

    Downloading subject04_mrw: 152kB [00:00, 300kB/s]  

    Downloading subject04_mrw: 400kB [00:00, 745kB/s]

    Downloading subject04_mrw: 681kB [00:01, 1.13MB/s]

                                                        

    Downloading subject04_mrw: 913kB [00:01, 1.30MB/s]

    Downloading subject04_mrw: 1.03MB [00:01, 1.29MB/s]

    Downloading subject04_mrw: 1.17MB [00:01, 1.33MB/s]

    Downloading subject04_mrw: 1.36MB [00:01, 1.46MB/s]

    Downloading subject04_mrw: 1.53MB [00:01, 1.54MB/s]

    Downloading subject04_mrw: 1.70MB [00:01, 1.61MB/s]

    Downloading subject04_mrw: 1.88MB [00:01, 1.55MB/s]

    Downloading subject04_mrw: 2.05MB [00:01, 1.60MB/s]

    Downloading subject04_mrw: 2.20MB [00:02, 1.53MB/s]

                                                       



.. GENERATED FROM PYTHON SOURCE LINES 31-36

The phantoms here created are sparse, i.e., they consists of a
``(nclasses, *spatial_shape)`` shaped ``np.ndarray`` representing the
probabilistic maps of each tissue type (e.g., Gray Matter, White Matter, CSF)
and a list of ``(nclasses,)`` dictionaries each containing the ``(M0, T1, T2, T2*, Chi)``
values for each class:

.. GENERATED FROM PYTHON SOURCE LINES 36-64

.. code-block:: Python


    example2D = np.concatenate((phantom2D[3], phantom2D[2], phantom2D[1]), axis=0)

    example3Dax = np.concatenate(
        (phantom3D[3, 100], phantom3D[2, 100], phantom3D[1, 100]), axis=0
    )
    example3Dcor = np.concatenate(
        (phantom3D[3, ::-1, 100], phantom3D[2, ::-1, 100], phantom3D[1, ::-1, 100]), axis=0
    )
    example3Dsag = np.concatenate(
        (
            phantom3D[3, ::-1, :, 100],
            phantom3D[2, ::-1, :, 100],
            phantom3D[1, ::-1, :, 100],
        ),
        axis=0,
    )
    example3D = np.concatenate((example3Dax, example3Dcor, example3Dsag), axis=1)

    fig1, ax1 = plt.subplots(1, 2)
    ax1[0].imshow(example2D, cmap="gray"), ax1[0].axis("off"), ax1[0].set_title(
        "2D phantom"
    )
    ax1[1].imshow(example3D, cmap="gray"), ax1[1].axis("off"), ax1[1].set_title(
        "3D phantom"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_001.png
   :alt: 2D phantom, 3D phantom
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-67

The ``(M0, T1, T2, T2*, Chi)`` properties
can be direcly accessed as:

.. GENERATED FROM PYTHON SOURCE LINES 67-74

.. code-block:: Python


    _, _ = print("M0:", end="\t"), print(phantom2D.M0)  # same for phantom3D
    _, _ = print("T1 (ms):", end="\t"), print(phantom2D.T1)
    _, _ = print("T2 (ms):", end="\t"), print(phantom2D.T2)
    _, _ = print("T2* (ms):", end="\t"), print(phantom2D.T2s)
    _, _ = print("Chi:", end="\t"), print(phantom2D.Chi)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    M0:     [0.   1.   0.86 0.77 1.   1.   1.   1.   1.   1.   1.   1.  ]
    T1 (ms):        [   0.      4200.       998.1393   680.66815  342.50705 1050.
     1050.       350.      1549.5471   342.50705  700.       552.36127]
    T2 (ms):        [   0. 1990.  100.   80.   70.   50.   50.   15.  200.   70.  150.   50.]
    T2* (ms):       [  0.       243.06877   73.46702   62.067276  64.09466   42.323383
      42.323383  14.274805 116.12312   64.09466   97.293144  46.912655]
    Chi:    [ 4.00e-07 -9.00e-06 -9.00e-06 -9.00e-06  3.28e-06 -9.04e-06 -9.04e-06
     -8.44e-06 -9.00e-06  3.28e-06 -9.00e-06  3.28e-06]




.. GENERATED FROM PYTHON SOURCE LINES 75-77

If required, the ``properties`` dictionary
can be directly accessed as:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    print(phantom2D.properties)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'M0': array([0.  , 1.  , 0.86, 0.77, 1.  , 1.  , 1.  , 1.  , 1.  , 1.  , 1.  ,
           1.  ], dtype=float32), 'T1': array([   0.     , 4200.     ,  998.1393 ,  680.66815,  342.50705,
           1050.     , 1050.     ,  350.     , 1549.5471 ,  342.50705,
            700.     ,  552.36127], dtype=float32), 'T2': array([   0., 1990.,  100.,   80.,   70.,   50.,   50.,   15.,  200.,
             70.,  150.,   50.], dtype=float32), 'T2s': array([  0.      , 243.06877 ,  73.46702 ,  62.067276,  64.09466 ,
            42.323383,  42.323383,  14.274805, 116.12312 ,  64.09466 ,
            97.293144,  46.912655], dtype=float32), 'Chi': array([ 4.00e-07, -9.00e-06, -9.00e-06, -9.00e-06,  3.28e-06, -9.04e-06,
           -9.04e-06, -8.44e-06, -9.00e-06,  3.28e-06, -9.00e-06,  3.28e-06],
          dtype=float32)}




.. GENERATED FROM PYTHON SOURCE LINES 81-88

e.g., to be passed as ``**kwargs`` to a simulator routine.

Notice that segmentation can be accessed directly (in read-only mode)
via square bracked indexing, similarly to numpy arrays.

A basic summary of the properties can be accessed
via the ``__repr__`` attribute (i.e., enabling pretty printing):

.. GENERATED FROM PYTHON SOURCE LINES 88-127

.. code-block:: Python


    print(phantom2D)
    print(phantom3D)

    # We also provide a crisp segmentation, which has a lower memory footprint
    # at cost of a coarser approximation (i.e., a piecewise-constant tissue model)-
    #
    # This can be obtained starting from the `"fuzzy"` phantom as:

    phantom2D = phantom2D.as_crisp()
    phantom3D = phantom3D.as_crisp()

    # Print summary

    print(phantom2D)
    print(phantom3D)

    # Display spatial segmentations

    example2D = phantom2D

    example3Dax = np.concatenate((phantom3D[100], phantom3D[100], phantom3D[100]), axis=0)
    example3Dcor = np.concatenate(
        (phantom3D[::-1, 100], phantom3D[::-1, 100], phantom3D[::-1, 100]), axis=0
    )
    example3Dsag = np.concatenate(
        (phantom3D[::-1, :, 100], phantom3D[::-1, :, 100], phantom3D[::-1, :, 100]), axis=0
    )
    example3D = np.concatenate((example3Dax, example3Dcor, example3Dsag), axis=1)

    fig2, ax2 = plt.subplots(1, 2)
    ax2[0].imshow(example2D, cmap="turbo"), ax2[0].axis("off"), ax2[0].set_title(
        "2D phantom"
    )
    ax2[1].imshow(example3D, cmap="turbo"), ax2[1].axis("off"), ax2[1].set_title(
        "3D phantom"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_002.png
   :alt: 2D phantom, 3D phantom
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fuzzy Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200)
    Number of tissue classes: 12

    Fuzzy Brainweb phantom with following properties:
    Number of spatial dimensions: 3
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200, 200)
    Number of tissue classes: 12

    Crisp Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200)

    Crisp Brainweb phantom with following properties:
    Number of spatial dimensions: 3
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200, 200)





.. GENERATED FROM PYTHON SOURCE LINES 128-129

Crisp phantom can be also directly generated as:

.. GENERATED FROM PYTHON SOURCE LINES 129-138

.. code-block:: Python


    phantom2D = brainweb_phantom(ndim=2, subject=4, segtype="crisp")  # 2D phantom
    phantom3D = brainweb_phantom(ndim=3, subject=4, segtype="crisp")  # 3D phantom

    # N.B. ``segtype`` can be omitted as the default is ``"crisp"``.

    phantom2D = brainweb_phantom(ndim=2, subject=4)  # single-slice 2D phantom
    phantom3D = brainweb_phantom(ndim=3, subject=4)  # 3D phantom








.. GENERATED FROM PYTHON SOURCE LINES 139-146

Finally, we can obtain a "dense" phantom,
i.e., an object without segmentation whose
``(M0, T1, T2, T2*, Chi)`` properties are stored
as parametric maps rather than the individual values
of each tissue class.

This can be obtain (both from ``"fuzzy"`` and ``"crisp"`` models) as:

.. GENERATED FROM PYTHON SOURCE LINES 146-180

.. code-block:: Python


    phantom2D = phantom2D.as_numeric()

    # Print summary

    print(phantom2D)

    # Display parameter maps

    fig3, ax3 = plt.subplots(1, 5)

    im0 = ax3[0].imshow(phantom2D.M0, cmap="gray")
    ax3[0].axis("off"), ax3[0].set_title("M0 [a.u.]")
    fig3.colorbar(im0, ax=ax3[0], fraction=0.046, pad=0.04)

    im1 = ax3[1].imshow(phantom2D.T1, cmap="magma")
    ax3[1].axis("off"), ax3[1].set_title("T1 [ms]")
    fig3.colorbar(im1, ax=ax3[1], fraction=0.046, pad=0.04)

    im2 = ax3[2].imshow(phantom2D.T2, cmap="viridis", vmax=150)
    ax3[2].axis("off"), ax3[2].set_title("T2 [ms]")
    fig3.colorbar(im2, ax=ax3[2], fraction=0.046, pad=0.04)

    im3 = ax3[3].imshow(phantom2D.T2s, cmap="viridis", vmax=150)
    ax3[3].axis("off"), ax3[3].set_title("T2* [ms]")
    fig3.colorbar(im3, ax=ax3[3], fraction=0.046, pad=0.04)

    im4 = ax3[4].imshow(phantom2D.Chi, cmap="gray")
    ax3[4].axis("off"), ax3[4].set_title("Chi")
    fig3.colorbar(im4, ax=ax3[4], fraction=0.046, pad=0.04)

    plt.tight_layout()
    plt.show()




.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_003.png
   :alt: M0 [a.u.], T1 [ms], T2 [ms], T2* [ms], Chi
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dense Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200)





.. GENERATED FROM PYTHON SOURCE LINES 181-182

Dense phantom can be also directly generated as:

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: Python


    phantom2D = brainweb_phantom(ndim=2, subject=4, segtype=False)  # 2D phantom

    # Print summary

    print(phantom2D)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dense Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200)





.. GENERATED FROM PYTHON SOURCE LINES 190-191

Hereafter, without loss of generality, we will use 2D phantoms.

.. GENERATED FROM PYTHON SOURCE LINES 193-201

By default, Brainweb phantoms are interpolated
to 1.085 mm isotropic resolution with a 200 isotropic matrix (217 mm iso FOV).

These can be adjusted using ``shape`` and ``output_res`` model:

1. ``shape`` will control the matrix size without affecting the resolution.
2. ``output_res`` will adjust the spatial resolution keeping the same (i.e., 200 iso) matrix


.. GENERATED FROM PYTHON SOURCE LINES 202-233

.. code-block:: Python


    phantom2D = brainweb_phantom(ndim=2, subject=4)
    phantom2D_mtx = brainweb_phantom(
        ndim=2, subject=4, shape=256
    )  # can also be shape=(ny, nx)
    phantom2D_res = brainweb_phantom(
        ndim=2, subject=4, output_res=2.0
    )  # can also be output_res=(dy, dx)
    phantom2D_mtx_res = brainweb_phantom(ndim=2, subject=4, shape=256, output_res=2.0)

    print(phantom2D)
    print(phantom2D_mtx)
    print(phantom2D_res)
    print(phantom2D_mtx_res)

    fig4, ax4 = plt.subplots(2, 2)
    ax4[0, 0].imshow(phantom2D, cmap="turbo"), ax4[0, 0].axis("off"), ax4[0, 0].set_title(
        "shape 200, res=1.085mm, fov=217mm"
    )
    ax4[0, 1].imshow(phantom2D_mtx, cmap="turbo"), ax4[0, 1].axis("off"), ax4[
        0, 1
    ].set_title("shape 256, res=1.085mm, fov=277mm")
    ax4[1, 0].imshow(phantom2D_res, cmap="turbo"), ax4[1, 0].axis("off"), ax4[
        1, 0
    ].set_title("shape 200, res=2.0mm, fov=400mm")
    ax4[1, 1].imshow(phantom2D_mtx_res, cmap="turbo"), ax4[1, 1].axis("off"), ax4[
        1, 1
    ].set_title("shape 256, res=2.0mm, fov=512mm")
    plt.show()





.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_004.png
   :alt: shape 200, res=1.085mm, fov=217mm, shape 256, res=1.085mm, fov=277mm, shape 200, res=2.0mm, fov=400mm, shape 256, res=2.0mm, fov=512mm
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Crisp Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200)

    Crisp Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (256, 256)

    Crisp Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (200, 200)

    Crisp Brainweb phantom with following properties:
    Number of spatial dimensions: 2
    Tissue properties: dict_keys(['M0', 'T1', 'T2', 'T2s', 'Chi'])
    Matrix size: (256, 256)





.. GENERATED FROM PYTHON SOURCE LINES 234-238

The physical parameter of each tissue class are calculated by
default for a field strength of 1.5 T.

This can be changed via the ``B0`` argument:

.. GENERATED FROM PYTHON SOURCE LINES 239-271

.. code-block:: Python


    # B0 strengths
    B0 = [0.55, 1.5, 3.0, 7.0, 11.7, 13.3]  # field strengths in [T]

    # Generate phantoms with different field strengths
    phantomB0 = [
        brainweb_phantom(ndim=2, subject=4, B0=strength, segtype=False) for strength in B0
    ]

    # Display
    T1 = np.concatenate([phantom.T1 for phantom in phantomB0], axis=1)
    T2 = np.concatenate([phantom.T2 for phantom in phantomB0], axis=1)
    T2s = np.concatenate([phantom.T2s for phantom in phantomB0], axis=1)

    fig5, ax5 = plt.subplots(3, 1)

    im1 = ax5[0].imshow(T1, cmap="magma", vmax=5000)
    ax5[0].axis("off"), ax5[0].set_title("T1 [ms]")
    fig5.colorbar(im1, ax=ax5[0], fraction=0.046, pad=0.04)

    im2 = ax5[1].imshow(T2, cmap="viridis", vmax=150)
    ax5[1].axis("off"), ax5[1].set_title("T2 [ms]")
    fig5.colorbar(im2, ax=ax5[1], fraction=0.046, pad=0.04)

    im3 = ax5[2].imshow(T2s, cmap="viridis", vmax=100)
    ax5[2].axis("off"), ax5[2].set_title("T2* [ms]")
    fig5.colorbar(im3, ax=ax5[2], fraction=0.046, pad=0.04)

    plt.tight_layout()
    plt.show()





.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_005.png
   :alt: T1 [ms], T2 [ms], T2* [ms]
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 272-290

In addition to single pool model, we provide 3 multi-pool models:

1. ``"mw-model"``: a two-pool model where free water is divided in two compartments,
   i.e., `intra-/extra-cellular water` (long T1 / T2) and `myelin water` (short T1 / T2).
   The model include chemical exchange between the two pools.
   Parameters are ``(MWF, T1, T2, k, chemshift)``.
2. ``"mt-model"``: a two-pool model consisting in `free water` and `bound water`.
   Free water includes both intra-/extra-cellular and myelin water (as in the single-pool model),
   while bound water corresponds to a macromolecular pool with the same T1 as the free water
   and no T2 (i.e., no transverse magnetiztion).
   The model include magnetization transfer between the two pools.
   Parameters are ``(MVF, T1, T2, k)``.
3. ``"mwmt-model"``: a three-pool model consisting in `intra-/extra-cellular water`, `myelin water` and `bound water`.
   The model include chemical exchange between the two free water pools and magnetizion transfer between
   myelin water and bound water.
   Parameters are ``(MWF, MVF, T1, T2, k)``.

Here we will display the latter, as it represents the most general case.

.. GENERATED FROM PYTHON SOURCE LINES 291-295

.. code-block:: Python


    # model="single-pool" is the default, while "mw-model" and "mt-model" corresponds to cases 1. and 2.
    phantom_multi = brainweb_phantom(ndim=2, subject=4, model="mwmt-model", segtype=False)








.. GENERATED FROM PYTHON SOURCE LINES 296-298

MWF corresponds to the myelin water fraction, while MVF to the bound water fraction.
We assume that intra-extracellular water fraction ``= 1 - (MWF + MVF)``:

.. GENERATED FROM PYTHON SOURCE LINES 299-311

.. code-block:: Python


    MWF = phantom_multi.MWF
    MVF = phantom_multi.MVF
    IEWF = (1 - (MWF + MVF)) * (MWF > 0)
    weight = np.concatenate((IEWF, MWF, MVF), axis=1)

    plt.figure()
    plt.imshow(weight, vmin=0, vmax=1, cmap="hot"), plt.axis("off"), plt.title(
        "pool fractions"
    ), plt.colorbar()
    plt.show()




.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_006.png
   :alt: pool fractions
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 312-315

T1 and T2 for the two free water pools are stacked along the first axis,
with ``n=0`` being the intra-/extra-cellular water (long T1 / T2) and
``n=1`` being the myelin water (short T1 / T2):

.. GENERATED FROM PYTHON SOURCE LINES 316-331

.. code-block:: Python


    T1 = np.concatenate((phantom_multi.T1[0], phantom_multi.T1[1]), axis=1)
    T2 = np.concatenate((phantom_multi.T2[0], phantom_multi.T2[1]), axis=1)

    fig6, ax6 = plt.subplots(2, 1)

    im1 = ax6[0].imshow(T1, cmap="magma", vmax=1500)
    ax6[0].axis("off"), ax6[0].set_title("T1 [ms]")
    fig6.colorbar(im1, ax=ax6[0], fraction=0.046, pad=0.04)

    im2 = ax6[1].imshow(T2, cmap="viridis", vmax=150)
    ax6[1].axis("off"), ax6[1].set_title("T2 [ms]")
    fig6.colorbar(im2, ax=ax6[1], fraction=0.046, pad=0.04)





.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_007.png
   :alt: T1 [ms], T2 [ms]
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7f9a69237460>



.. GENERATED FROM PYTHON SOURCE LINES 332-335

k represent the non-directional exchange rates in [Hz],
with ``n=0`` being the chemical exchange rate between the two free water pools
and ``n=1`` being magnetization transfer rate between the myelin and bound water:

.. GENERATED FROM PYTHON SOURCE LINES 336-345

.. code-block:: Python


    k = np.concatenate((phantom_multi.k[0], phantom_multi.k[1]), axis=1)

    plt.figure()
    plt.imshow(k, cmap="hot"), plt.axis("off"), plt.title(
        "exchange rate [Hz]"
    ), plt.colorbar()
    plt.show()




.. image-sg:: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_008.png
   :alt: exchange rate [Hz]
   :srcset: /generated/autoexamples/01.Phantoms/images/sphx_glr_example_brainweb_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 346-386

Similarly to the single pool model, ``mrtwin`` supports ``"fuzzy"`` and ``"crisp"``
segmentations.

Caching mechanism
=================

To reduce loading times, `mrtwin` implements a caching mechanism.

If ``cache`` argument is set to ``True`` (default behaviour), each phantom
segmentation (identified by the number of spatial dimensions,
tissue model, segmentation type, matrix shape and resolution)
is saved on the disk in ``npy`` format.

The path is selected according to the following hierachy (inspired by ``brainweb-dl``):

1. User-specific argument (``cache_dir``)
2. ``MRTWIN_DIR`` environment variable
3. ``~/.cache/mrtwin`` folder

On top of that, the underlying Brainweb fuzzy segmentations at the original
resolution are stored (via ``brainweb-dl``) with the following hierachy:

1. User-specific argument (``brainweb_dir``)
2. ``BRAINWEB_DIR`` environment variable
3. ``~/.cache/brainweb`` folder

The cached files can be forcibly overwritten by setting the ``force`` argument
to ``True`` (default: ``False``).

N.B.: currently, ``force=True`` will both force re-downloading brainweb segmentation
and the subsequent interpolations and resizing required to obtain the
desired shape and resolution.

Disabling SSL verification (not recommended)
============================================

If you encounter some issue in downloading, SSL verification
can be disabled by setting ``verify`` to ``False`` (default: ``True``).
It is advised however to solve the problem on your machine side
(updating the certificate).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 26.431 seconds)


.. _sphx_glr_download_generated_autoexamples_01.Phantoms_example_brainweb.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/infn-mri/mrtwin/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/01.Phantoms/example_brainweb.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_brainweb.ipynb <example_brainweb.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_brainweb.py <example_brainweb.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_brainweb.zip <example_brainweb.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/02.Fields/example_transmitfield.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_02.Fields_example_transmitfield.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_02.Fields_example_transmitfield.py:


=========================
Transmit Field Simulation
=========================

Example of transmit field (i.e., B1+) map generation.

This examples show how to generate coil sensitivity maps
for a single or multi-channel transmit array.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from mrtwin import b1field

    plt.rcParams["image.cmap"] = "hot"









.. GENERATED FROM PYTHON SOURCE LINES 21-28

Basic Usage
===========

Two- and three-dimensional transmit field maps
can be generated providing ``(ny, nx)`` and
``(nz, ny, nx)`` shaped tuple as a ``shape`` argument
to `b1field` routine, respectively:

.. GENERATED FROM PYTHON SOURCE LINES 28-41

.. code-block:: Python


    b1map2D = b1field(shape=(200, 200))  # (200, 200) matrix
    print(b1map2D.shape)

    b1map3D = b1field(shape=(128, 128, 128))  # (128, 128, 128) matrix
    print(b1map3D.shape)

    plt.figure()
    plt.imshow(b1map2D), plt.axis("off"), plt.colorbar(), plt.title(
        "transmit field (in units of relative flip angle)"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_001.png
   :alt: transmit field (in units of relative flip angle)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (200, 200)
    (128, 128, 128)




.. GENERATED FROM PYTHON SOURCE LINES 42-47

The transmit field maps are generated
with a relative flip angle variation
between 0.8 and 1.2 (e.g., 3T systems).

This can be changed via the ``b1range`` argument:

.. GENERATED FROM PYTHON SOURCE LINES 48-57

.. code-block:: Python


    b1map2D = b1field(shape=(200, 200), b1range=(0.5, 2.0))

    plt.figure()
    plt.imshow(b1map2D), plt.axis("off"), plt.colorbar(), plt.title(
        "transmit field with b1range between 0.5 and 2.0"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_002.png
   :alt: transmit field with b1range between 0.5 and 2.0
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 58-62

This can be used e.g., to simulate field maps for higher fields (e.g., 7T systems).

Optionally, we can provide a mask of the object to exclude the background
when calculating the field rescaling:

.. GENERATED FROM PYTHON SOURCE LINES 63-73

.. code-block:: Python


    from mrtwin import shepplogan_phantom

    mask = shepplogan_phantom(ndim=2, shape=(200, 200), segtype=False).M0 != 0.0
    b1map2D = b1field(shape=(200, 200), mask=mask)

    plt.figure()
    plt.imshow(b1map2D), plt.axis("off"), plt.colorbar(), plt.title("masked transmit field")
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_003.png
   :alt: masked transmit field
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-86

Advanced Options
================

The sensitivity maps can be altered by modifying several parameters:

1. ``coil_width``: width of the coil (with respect to FOV).
2. ``shift``: displacement of the center (in units of voxels).
3. ``dphi``: bulk rotation of the coil (in [deg]).
4. ``ncoils``: number of transmit channels in the transmit array.
5. ``nrings``: number of rings for a cylindrical hardware setup.

Without loss of generality, we show examples for 2D sensitivities:

.. GENERATED FROM PYTHON SOURCE LINES 88-90

Coil width
----------

.. GENERATED FROM PYTHON SOURCE LINES 90-103

.. code-block:: Python

    widths = [0.5, 1.0, 1.5, 2.0]
    b1map2D = [
        b1field(shape=(200, 200), coil_width=w) for w in widths
    ]  # only show first channel

    display = np.concatenate(b1map2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.colorbar(), plt.title(
        "coil width from 0.5 to 2.0 times fov"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_004.png
   :alt: coil width from 0.5 to 2.0 times fov
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-106

Center shift
------------

.. GENERATED FROM PYTHON SOURCE LINES 106-119

.. code-block:: Python

    dx = [-20, -10, 0, 10, 20]
    b1map2D = [
        b1field(shape=(200, 200), shift=(0, x), coil_width=0.5) for x in dx
    ]  # for 3D, it would be shift=(dz, dy, dx)

    display = np.concatenate(b1map2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.colorbar(), plt.title(
        "x-displacement from -20 to 20 times voxels"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_005.png
   :alt: x-displacement from -20 to 20 times voxels
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-122

Rotation
--------

.. GENERATED FROM PYTHON SOURCE LINES 122-133

.. code-block:: Python

    phi = [-20, -10, 0, 10, 20]
    b1map2D = [b1field(shape=(200, 200), dphi=angle, coil_width=0.5) for angle in phi]

    display = np.concatenate(b1map2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.colorbar(), plt.title(
        "coil rotation from -20 to 20 degrees (first channel)"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_006.png
   :alt: coil rotation from -20 to 20 degrees (first channel)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-136

Number of rings
---------------

.. GENERATED FROM PYTHON SOURCE LINES 136-148

.. code-block:: Python

    ncoils = [1, 2, 4, 8, 16, 32]
    b1map2D = [b1field(shape=(200, 200), ncoils=n, coil_width=0.5) for n in ncoils]

    display = np.concatenate(b1map2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.colorbar(), plt.title(
        "number of channels from 1 to 16"
    )
    plt.show()





.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_007.png
   :alt: number of channels from 1 to 16
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 149-151

Number of rings
---------------

.. GENERATED FROM PYTHON SOURCE LINES 151-163

.. code-block:: Python

    nrings = [2, 4, 6, 8, 10]
    b1map2D = [b1field(shape=(200, 200), nrings=n, coil_width=0.5) for n in nrings]

    display = np.concatenate(b1map2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.colorbar(), plt.title(
        "number of rings from 2 to 10 (first channel)"
    )
    plt.show()





.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_008.png
   :alt: number of rings from 2 to 10 (first channel)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-172

Multiple Transmit Modes
=======================

By default, the sensitivities from each transmit channel are combined
in quadrature mode.

With ``mrtwin``, multiple orthogonal modes can be simulated by ``nmodes`` argument.
For example, `CP` mode and `gradient` modes (e.g., for static pTx)  can be obtained as:

.. GENERATED FROM PYTHON SOURCE LINES 172-175

.. code-block:: Python


    b1map = b1field((200, 200), nmodes=2)  # b1map[0] is CP, b1map[1] is gradient mode.








.. GENERATED FROM PYTHON SOURCE LINES 176-178

In this case, b1map will be a ``(nmodes, *shape)`` ``np.ndarray``, the different
modes being stacked along the first axis:

.. GENERATED FROM PYTHON SOURCE LINES 179-198

.. code-block:: Python


    fig, ax = plt.subplots(2, 2)
    im0 = ax[0, 0].imshow(np.abs(b1map[0]))
    ax[0, 0].axis("off"), ax[0, 0].set_title("CP mode (magn)")
    fig.colorbar(im0, ax=ax[0, 0], fraction=0.046, pad=0.04)

    im1 = ax[0, 1].imshow(np.angle(b1map[0]))
    ax[0, 1].axis("off"), ax[0, 1].set_title("CP mode (phase)")
    fig.colorbar(im1, ax=ax[0, 1], fraction=0.046, pad=0.04)

    im2 = ax[1, 0].imshow(np.abs(b1map[1]))
    ax[1, 0].axis("off"), ax[1, 0].set_title("gradient mode (magn)")
    fig.colorbar(im2, ax=ax[1, 0], fraction=0.046, pad=0.04)

    im3 = ax[1, 1].imshow(np.angle(b1map[1]))
    ax[1, 1].axis("off"), ax[1, 1].set_title("gradient mode (phase)")
    fig.colorbar(im3, ax=ax[1, 1], fraction=0.046, pad=0.04)
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_009.png
   :alt: CP mode (magn), CP mode (phase), gradient mode (magn), gradient mode (phase)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_transmitfield_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 199-215

Caching mechanism
=================

To reduce loading times, ``mrtwin`` implements a caching mechanism.

If ``cache`` argument is set to ``True`` (default behaviour for ``ndim=3``), each transmit field map
segmentation (identified by the number of channels, number of modes,
matrix size, shift, rotation angle, number of rings, b1 range and masking flag)
is saved on the disk in ``npy`` format.

The path is selected according to the following hierachy (inspired by ``brainweb-dl``):

1. User-specific argument (``cache_dir``)
2. ``MRTWIN_DIR`` environment variable
3. ``~/.cache/mrtwin`` folder



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.370 seconds)


.. _sphx_glr_download_generated_autoexamples_02.Fields_example_transmitfield.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/infn-mri/mrtwin/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/02.Fields/example_transmitfield.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_transmitfield.ipynb <example_transmitfield.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_transmitfield.py <example_transmitfield.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_transmitfield.zip <example_transmitfield.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

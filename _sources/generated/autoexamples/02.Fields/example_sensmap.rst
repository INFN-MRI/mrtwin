
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/02.Fields/example_sensmap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_02.Fields_example_sensmap.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_02.Fields_example_sensmap.py:


===========================
Coil Sensitivity Simulation
===========================

Example of coil sensitivity map generation.

This examples show how to generate coil sensitivity maps
for a multi-channel receiver array.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from mrtwin import sensmap

    plt.rcParams["image.cmap"] = "gray"









.. GENERATED FROM PYTHON SOURCE LINES 21-28

Basic Usage
===========

Two- and three-dimensional coil sensitivity maps
can be generated providing ``(nc, ny, nx)`` and
``(nc, nz, ny, nx)`` shaped tuple as a ``shape`` argument
to `sensmap` routine, respectively:

.. GENERATED FROM PYTHON SOURCE LINES 28-43

.. code-block:: Python


    smap2D = sensmap(shape=(8, 200, 200))  # 8 channels; (200, 200) matrix
    print(smap2D.shape)

    smap3D = sensmap(shape=(8, 128, 128, 128))  # 8 channels; (128, 128, 128) matrix
    print(smap3D.shape)

    display_magn = np.concatenate([np.abs(smap) for smap in smap2D], axis=1)
    display_phase = np.concatenate([np.angle(smap) for smap in smap2D], axis=1)

    fig1, ax1 = plt.subplots(2, 1)
    ax1[0].imshow(display_magn), ax1[0].axis("off"), ax1[0].set_title("coil magnitudes")
    ax1[1].imshow(display_phase), ax1[1].axis("off"), ax1[1].set_title("coil phases")
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_001.png
   :alt: coil magnitudes, coil phases
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (8, 200, 200)
    (8, 128, 128, 128)




.. GENERATED FROM PYTHON SOURCE LINES 44-55

Advanced Options
================

The sensitivity maps can be altered by modifying several parameters:

1. ``coil_width``: width of the coil (with respect to FOV).
2. ``shift``: displacement of the center (in units of voxels).
3. ``dphi``: bulk rotation of the coil (in [deg]).
4. ``nrings``: number of rings for a cylindrical hardware setup.

Without loss of generality, we show examples for 2D sensitivities:

.. GENERATED FROM PYTHON SOURCE LINES 57-59

Coil width
----------

.. GENERATED FROM PYTHON SOURCE LINES 59-72

.. code-block:: Python

    widths = [0.5, 1.0, 1.5, 2.0]
    smap2D = [
        sensmap(shape=(8, 200, 200), coil_width=w)[0] for w in widths
    ]  # only show first channel

    display = np.concatenate(smap2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.title(
        "coil width from 0.5 to 2.0 times fov (first channel)"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_002.png
   :alt: coil width from 0.5 to 2.0 times fov (first channel)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-75

Center shift
------------

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: Python

    dx = [-20, -10, 0, 10, 20]
    smap2D = [
        sensmap(shape=(8, 200, 200), shift=(0, x), coil_width=0.5)[0] for x in dx
    ]  # for 3D, it would be shift=(dz, dy, dx)

    display = np.concatenate(smap2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.title(
        "x-displacement from -20 to 20 times voxels (first channel)"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_003.png
   :alt: x-displacement from -20 to 20 times voxels (first channel)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-91

Rotation
--------

.. GENERATED FROM PYTHON SOURCE LINES 91-102

.. code-block:: Python

    phi = [-20, -10, 0, 10, 20]
    smap2D = [sensmap(shape=(8, 200, 200), dphi=angle, coil_width=0.5)[0] for angle in phi]

    display = np.concatenate(smap2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.title(
        "coil rotation from -20 to 20 degrees (first channel)"
    )
    plt.show()




.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_004.png
   :alt: coil rotation from -20 to 20 degrees (first channel)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 103-105

Number of rings
---------------

.. GENERATED FROM PYTHON SOURCE LINES 105-117

.. code-block:: Python

    nrings = [2, 4, 6, 8, 10]
    smap2D = [sensmap(shape=(8, 200, 200), nrings=n, coil_width=0.5)[0] for n in nrings]

    display = np.concatenate(smap2D, axis=1)

    plt.figure()
    plt.imshow(abs(display)), plt.axis("off"), plt.title(
        "number of rings from 2 to 10 (first channel)"
    )
    plt.show()





.. image-sg:: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_005.png
   :alt: number of rings from 2 to 10 (first channel)
   :srcset: /generated/autoexamples/02.Fields/images/sphx_glr_example_sensmap_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 118-134

Caching mechanism
=================

To reduce loading times, ``mrtwin`` implements a caching mechanism.

If ``cache`` argument is set to ``True`` (default behaviour for ``ndim=3``), each sensitivity map
segmentation (identified by the number of channels,
matrix size, shift, rotation angle and number of rings)
is saved on the disk in `npy` format.

The path is selected according to the following hierachy (inspired by ``brainweb-dl``):

1. User-specific argument (``cache_dir``)
2. ``MRTWIN_DIR`` environment variable
3. ``~/.cache/mrtwin`` folder



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.614 seconds)


.. _sphx_glr_download_generated_autoexamples_02.Fields_example_sensmap.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/infn-mri/mrtwin/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/02.Fields/example_sensmap.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_sensmap.ipynb <example_sensmap.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_sensmap.py <example_sensmap.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_sensmap.zip <example_sensmap.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
